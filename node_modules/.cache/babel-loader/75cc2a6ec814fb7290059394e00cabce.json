{"ast":null,"code":"import _objectSpread from \"/Users/irisha/spa/react-data-list_17_09/react-data-list/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/Users/irisha/spa/react-data-list_17_09/react-data-list/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { START, SUCCESS, FAIL } from '../constants';\nexport default (store => next => action => {\n  const callAPI = action.callAPI,\n        type = action.type,\n        rest = _objectWithoutProperties(action, [\"callAPI\", \"type\"]);\n\n  if (!callAPI) return next(action);\n  next(_objectSpread({\n    type: type + START\n  }, rest));\n  fetch(callAPI).then(res => res.json()).then(response => next(_objectSpread({}, rest, {\n    type: type + SUCCESS,\n    response\n  }))).catch(error => next(_objectSpread({}, rest, {\n    type: type + FAIL,\n    error\n  })));\n});","map":{"version":3,"sources":["/Users/irisha/spa/react-data-list_17_09/react-data-list/src/middlewares/api.js"],"names":["START","SUCCESS","FAIL","store","next","action","callAPI","type","rest","fetch","then","res","json","response","catch","error"],"mappings":";;AAAA,SAASA,KAAT,EAAgBC,OAAhB,EAAyBC,IAAzB,QAAsC,cAAtC;AAEA,gBAAeC,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AAAA,QAChCC,OADgC,GACLD,MADK,CAChCC,OADgC;AAAA,QACvBC,IADuB,GACLF,MADK,CACvBE,IADuB;AAAA,QACdC,IADc,4BACLH,MADK;;AAGxC,MAAI,CAACC,OAAL,EAAc,OAAOF,IAAI,CAACC,MAAD,CAAX;AAEdD,EAAAA,IAAI;AACFG,IAAAA,IAAI,EAAEA,IAAI,GAAGP;AADX,KAECQ,IAFD,EAAJ;AAMAC,EAAAA,KAAK,CAACH,OAAD,CAAL,CACGI,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESG,QAAD,IAAcT,IAAI,mBACjBI,IADiB;AAEpBD,IAAAA,IAAI,EAAEA,IAAI,GAAGN,OAFO;AAGpBY,IAAAA;AAHoB,KAF1B,EAOGC,KAPH,CAOSC,KAAK,IAAIX,IAAI,mBACfI,IADe;AAElBD,IAAAA,IAAI,EAAEA,IAAI,GAAGL,IAFK;AAGlBa,IAAAA;AAHkB,KAPtB;AAYD,CAvBD","sourcesContent":["import { START, SUCCESS, FAIL  } from '../constants'\n\nexport default store => next => action => {\n  const { callAPI, type, ...rest } = action\n\n  if (!callAPI) return next(action)\n\n  next({\n    type: type + START,\n    ...rest\n\n  })\n\n  fetch(callAPI)\n    .then((res) => res.json())\n    .then((response) => next({\n        ...rest,\n        type: type + SUCCESS,\n        response\n    }))\n    .catch(error => next({\n      ...rest,\n      type: type + FAIL,\n      error\n    }))\n}\n"]},"metadata":{},"sourceType":"module"}